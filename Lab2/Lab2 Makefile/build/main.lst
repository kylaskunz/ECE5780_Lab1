ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.EXTI0_1_IRQHandler,"ax",%progbits
  19              		.align	1
  20              		.global	EXTI0_1_IRQHandler
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	EXTI0_1_IRQHandler:
  26              	.LFB41:
   1:Src/main.c    **** /**
   2:Src/main.c    ****   *
   3:Src/main.c    ****   * Brandon Mouser
   4:Src/main.c    ****   * U0962682
   5:Src/main.c    ****   *
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * File Name          : main.c
   8:Src/main.c    ****   * Description        : Main program body
   9:Src/main.c    ****   ******************************************************************************
  10:Src/main.c    ****   ** This notice applies to any and all portions of this file
  11:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
  12:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  13:Src/main.c    ****   * inserted by the user or by software development tools
  14:Src/main.c    ****   * are owned by their respective copyright owners.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  19:Src/main.c    ****   * are permitted provided that the following conditions are met:
  20:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  21:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  22:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  24:Src/main.c    ****   *      and/or other materials provided with the distribution.
  25:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  27:Src/main.c    ****   *      without specific prior written permission.
  28:Src/main.c    ****   *
  29:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  32:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 2


  33:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:Src/main.c    ****   *
  40:Src/main.c    ****   ******************************************************************************
  41:Src/main.c    ****   */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  44:Src/main.c    **** #include "main.h"
  45:Src/main.c    **** #include "stm32f0xx_hal.h"
  46:Src/main.c    **** void _Error_Handler(char * file, int line);
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END Includes */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN PV */
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PFP */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** 
  72:Src/main.c    **** int main(void)
  73:Src/main.c    **** {
  74:Src/main.c    ****   SystemClock_Config();
  75:Src/main.c    **** 
  76:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // For input button
  77:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // For LEDS
  78:Src/main.c    ****   RCC->APB2RSTR |= RCC_APB2RSTR_SYSCFGRST; // For SYSCFG
  79:Src/main.c    **** 
  80:Src/main.c    ****   // Set up LEDs
  81:Src/main.c    ****   GPIOC -> MODER |= (1 << 12); // PIN 6 (RED)
  82:Src/main.c    **** 	GPIOC -> MODER |= (1 << 14); // PIN 7 (BLLUE)
  83:Src/main.c    **** 	GPIOC -> MODER |= (1 << 16); // PIN 8 (ORANGE)
  84:Src/main.c    **** 	GPIOC -> MODER |= (1 << 18); // PIN 9 (GREEN)
  85:Src/main.c    **** 
  86:Src/main.c    ****   GPIOC -> OTYPER &= ~(1 << 6);
  87:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 7);
  88:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 8);
  89:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 9);
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 12);
  92:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 14);
  93:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 16);
  94:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 18);
  95:Src/main.c    **** 
  96:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 12)|(1 << 13));
  97:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 14)|(1 << 15));
  98:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 16)|(1 << 17));
  99:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 18)|(1 << 19));
 100:Src/main.c    **** 
 101:Src/main.c    ****   // Set input pin PA0
 102:Src/main.c    ****   GPIOA -> MODER &= ~((1 << 0) | (1 << 1));
 103:Src/main.c    **** 	GPIOA -> OSPEEDR &= ~(1 << 0);
 104:Src/main.c    **** 	GPIOA -> PUPDR &= ~(1 << 0);
 105:Src/main.c    **** 	GPIOA -> PUPDR |= (1 << 1);
 106:Src/main.c    **** 
 107:Src/main.c    ****   // Set EXTI
 108:Src/main.c    ****   EXTI -> IMR |= (1 << 0); // Unmask interrupt generation
 109:Src/main.c    ****   EXTI -> RTSR |= (1 << 0); // Rising edge trigger
 110:Src/main.c    **** 
 111:Src/main.c    ****   // Set up SYSCFG
 112:Src/main.c    ****   SYSCFG->EXTICR[0] &= ~((1 << 0) | (1 << 1) | (1 << 2)); // Set EXTI to PA0
 113:Src/main.c    ****   NVIC_EnableIRQ(EXTI0_1_IRQn);
 114:Src/main.c    ****   NVIC_SetPriority(EXTI0_1_IRQn, 1); // Set the EXTI priority to 1 (high-priority)
 115:Src/main.c    **** 
 116:Src/main.c    **** 
 117:Src/main.c    ****   // Set Green LED to high
 118:Src/main.c    ****   GPIOC -> ODR = GPIO_ODR_9;
 119:Src/main.c    **** 
 120:Src/main.c    ****   while (1) {
 121:Src/main.c    ****     HAL_Delay(500); // Delay 500ms
 122:Src/main.c    ****     GPIOC -> ODR ^= GPIO_ODR_6;    
 123:Src/main.c    **** 
 124:Src/main.c    ****   }
 125:Src/main.c    ****   
 126:Src/main.c    **** }
 127:Src/main.c    **** 
 128:Src/main.c    **** void EXTI0_1_IRQHandler(void) {
  27              		.loc 1 128 31 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
 129:Src/main.c    ****   GPIOC -> ODR ^= GPIO_ODR_8 | GPIO_ODR_9; // Toggle either orange or green on
  35              		.loc 1 129 3 view .LVU1
  36              		.loc 1 129 9 is_stmt 0 view .LVU2
  37 0002 0E4A     		ldr	r2, .L4
  38 0004 5169     		ldr	r1, [r2, #20]
  39              		.loc 1 129 16 view .LVU3
  40 0006 C023     		movs	r3, #192
  41 0008 9B00     		lsls	r3, r3, #2
  42 000a 4B40     		eors	r3, r1
  43 000c 5361     		str	r3, [r2, #20]
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 4


 130:Src/main.c    **** 
 131:Src/main.c    ****   // For part 2 of lab
 132:Src/main.c    ****   volatile int i;
  44              		.loc 1 132 3 is_stmt 1 view .LVU4
 133:Src/main.c    ****   for(i = 0; i < 1500000; i++) {}
  45              		.loc 1 133 3 view .LVU5
  46              		.loc 1 133 9 is_stmt 0 view .LVU6
  47 000e 0023     		movs	r3, #0
  48 0010 0193     		str	r3, [sp, #4]
  49              		.loc 1 133 3 view .LVU7
  50 0012 02E0     		b	.L2
  51              	.L3:
  52              		.loc 1 133 33 is_stmt 1 discriminator 3 view .LVU8
  53              		.loc 1 133 28 discriminator 3 view .LVU9
  54 0014 019B     		ldr	r3, [sp, #4]
  55 0016 0133     		adds	r3, r3, #1
  56 0018 0193     		str	r3, [sp, #4]
  57              	.L2:
  58              		.loc 1 133 16 discriminator 1 view .LVU10
  59 001a 019A     		ldr	r2, [sp, #4]
  60 001c 084B     		ldr	r3, .L4+4
  61 001e 9A42     		cmp	r2, r3
  62 0020 F8DD     		ble	.L3
 134:Src/main.c    ****   GPIOC -> ODR ^= GPIO_ODR_8 | GPIO_ODR_9; // Toggle either orange or green on
  63              		.loc 1 134 3 view .LVU11
  64              		.loc 1 134 9 is_stmt 0 view .LVU12
  65 0022 064A     		ldr	r2, .L4
  66 0024 5169     		ldr	r1, [r2, #20]
  67              		.loc 1 134 16 view .LVU13
  68 0026 C023     		movs	r3, #192
  69 0028 9B00     		lsls	r3, r3, #2
  70 002a 4B40     		eors	r3, r1
  71 002c 5361     		str	r3, [r2, #20]
 135:Src/main.c    **** 
 136:Src/main.c    ****   EXTI -> PR |= (1 << 0); // Selected trigger request occured
  72              		.loc 1 136 3 is_stmt 1 view .LVU14
  73              		.loc 1 136 8 is_stmt 0 view .LVU15
  74 002e 054A     		ldr	r2, .L4+8
  75 0030 5369     		ldr	r3, [r2, #20]
  76              		.loc 1 136 14 view .LVU16
  77 0032 0121     		movs	r1, #1
  78 0034 0B43     		orrs	r3, r1
  79 0036 5361     		str	r3, [r2, #20]
 137:Src/main.c    **** }
  80              		.loc 1 137 1 view .LVU17
  81 0038 02B0     		add	sp, sp, #8
  82              		@ sp needed
  83 003a 7047     		bx	lr
  84              	.L5:
  85              		.align	2
  86              	.L4:
  87 003c 00080048 		.word	1207961600
  88 0040 5FE31600 		.word	1499999
  89 0044 00040140 		.word	1073808384
  90              		.cfi_endproc
  91              	.LFE41:
  93              		.section	.text._Error_Handler,"ax",%progbits
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 5


  94              		.align	1
  95              		.global	_Error_Handler
  96              		.syntax unified
  97              		.code	16
  98              		.thumb_func
 100              	_Error_Handler:
 101              	.LFB43:
 138:Src/main.c    **** 
 139:Src/main.c    **** /** System Clock Configuration
 140:Src/main.c    **** */
 141:Src/main.c    **** void SystemClock_Config(void)
 142:Src/main.c    **** {
 143:Src/main.c    **** 
 144:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 145:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 146:Src/main.c    **** 
 147:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 148:Src/main.c    ****     */
 149:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 150:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 151:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 153:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 154:Src/main.c    ****   {
 155:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 156:Src/main.c    ****   }
 157:Src/main.c    **** 
 158:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 159:Src/main.c    ****     */
 160:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 161:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 162:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 163:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 164:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 165:Src/main.c    **** 
 166:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 167:Src/main.c    ****   {
 168:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 169:Src/main.c    ****   }
 170:Src/main.c    **** 
 171:Src/main.c    ****     /**Configure the Systick interrupt time
 172:Src/main.c    ****     */
 173:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 174:Src/main.c    **** 
 175:Src/main.c    ****     /**Configure the Systick
 176:Src/main.c    ****     */
 177:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 178:Src/main.c    **** 
 179:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 180:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 181:Src/main.c    **** }
 182:Src/main.c    **** 
 183:Src/main.c    **** /* USER CODE BEGIN 4 */
 184:Src/main.c    **** 
 185:Src/main.c    **** /* USER CODE END 4 */
 186:Src/main.c    **** 
 187:Src/main.c    **** /**
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 6


 188:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 189:Src/main.c    ****   * @param  None
 190:Src/main.c    ****   * @retval None
 191:Src/main.c    ****   */
 192:Src/main.c    **** void _Error_Handler(char * file, int line)
 193:Src/main.c    **** {
 102              		.loc 1 193 1 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ Volatile: function does not return.
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.LVL0:
 109              	.L7:
 194:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 195:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 196:Src/main.c    ****   while(1)
 110              		.loc 1 196 3 view .LVU19
 197:Src/main.c    ****   {
 198:Src/main.c    ****   }
 111              		.loc 1 198 3 view .LVU20
 196:Src/main.c    ****   {
 112              		.loc 1 196 8 view .LVU21
 113 0000 FEE7     		b	.L7
 114              		.cfi_endproc
 115              	.LFE43:
 117              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 118              		.align	2
 119              	.LC0:
 120 0000 5372632F 		.ascii	"Src/main.c\000"
 120      6D61696E 
 120      2E6300
 121              		.global	__aeabi_uidiv
 122              		.section	.text.SystemClock_Config,"ax",%progbits
 123              		.align	1
 124              		.global	SystemClock_Config
 125              		.syntax unified
 126              		.code	16
 127              		.thumb_func
 129              	SystemClock_Config:
 130              	.LFB42:
 142:Src/main.c    **** 
 131              		.loc 1 142 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 72
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135 0000 00B5     		push	{lr}
 136              	.LCFI1:
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 14, -4
 139 0002 93B0     		sub	sp, sp, #76
 140              	.LCFI2:
 141              		.cfi_def_cfa_offset 80
 144:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 142              		.loc 1 144 3 view .LVU23
 145:Src/main.c    **** 
 143              		.loc 1 145 3 view .LVU24
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 7


 149:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 144              		.loc 1 149 3 view .LVU25
 149:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 145              		.loc 1 149 36 is_stmt 0 view .LVU26
 146 0004 0223     		movs	r3, #2
 147 0006 0593     		str	r3, [sp, #20]
 150:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 148              		.loc 1 150 3 is_stmt 1 view .LVU27
 150:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 149              		.loc 1 150 30 is_stmt 0 view .LVU28
 150 0008 013B     		subs	r3, r3, #1
 151 000a 0893     		str	r3, [sp, #32]
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 152              		.loc 1 151 3 is_stmt 1 view .LVU29
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 153              		.loc 1 151 41 is_stmt 0 view .LVU30
 154 000c 0F33     		adds	r3, r3, #15
 155 000e 0993     		str	r3, [sp, #36]
 152:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 156              		.loc 1 152 3 is_stmt 1 view .LVU31
 152:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 157              		.loc 1 152 34 is_stmt 0 view .LVU32
 158 0010 0023     		movs	r3, #0
 159 0012 0E93     		str	r3, [sp, #56]
 153:Src/main.c    ****   {
 160              		.loc 1 153 3 is_stmt 1 view .LVU33
 153:Src/main.c    ****   {
 161              		.loc 1 153 7 is_stmt 0 view .LVU34
 162 0014 05A8     		add	r0, sp, #20
 163 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 164              	.LVL1:
 153:Src/main.c    ****   {
 165              		.loc 1 153 6 discriminator 1 view .LVU35
 166 001a 0028     		cmp	r0, #0
 167 001c 1ED1     		bne	.L11
 160:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 168              		.loc 1 160 3 is_stmt 1 view .LVU36
 160:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 169              		.loc 1 160 31 is_stmt 0 view .LVU37
 170 001e 0723     		movs	r3, #7
 171 0020 0193     		str	r3, [sp, #4]
 162:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 172              		.loc 1 162 3 is_stmt 1 view .LVU38
 162:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 173              		.loc 1 162 34 is_stmt 0 view .LVU39
 174 0022 0023     		movs	r3, #0
 175 0024 0293     		str	r3, [sp, #8]
 163:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 176              		.loc 1 163 3 is_stmt 1 view .LVU40
 163:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 177              		.loc 1 163 35 is_stmt 0 view .LVU41
 178 0026 0393     		str	r3, [sp, #12]
 164:Src/main.c    **** 
 179              		.loc 1 164 3 is_stmt 1 view .LVU42
 164:Src/main.c    **** 
 180              		.loc 1 164 36 is_stmt 0 view .LVU43
 181 0028 0493     		str	r3, [sp, #16]
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 8


 166:Src/main.c    ****   {
 182              		.loc 1 166 3 is_stmt 1 view .LVU44
 166:Src/main.c    ****   {
 183              		.loc 1 166 7 is_stmt 0 view .LVU45
 184 002a 0021     		movs	r1, #0
 185 002c 01A8     		add	r0, sp, #4
 186 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 187              	.LVL2:
 166:Src/main.c    ****   {
 188              		.loc 1 166 6 discriminator 1 view .LVU46
 189 0032 0028     		cmp	r0, #0
 190 0034 16D1     		bne	.L12
 173:Src/main.c    **** 
 191              		.loc 1 173 3 is_stmt 1 view .LVU47
 173:Src/main.c    **** 
 192              		.loc 1 173 22 is_stmt 0 view .LVU48
 193 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 194              	.LVL3:
 173:Src/main.c    **** 
 195              		.loc 1 173 3 discriminator 1 view .LVU49
 196 003a FA21     		movs	r1, #250
 197 003c 8900     		lsls	r1, r1, #2
 198 003e FFF7FEFF 		bl	__aeabi_uidiv
 199              	.LVL4:
 200 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 201              	.LVL5:
 177:Src/main.c    **** 
 202              		.loc 1 177 3 is_stmt 1 view .LVU50
 203 0046 0420     		movs	r0, #4
 204 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 205              	.LVL6:
 180:Src/main.c    **** }
 206              		.loc 1 180 3 view .LVU51
 207 004c 0120     		movs	r0, #1
 208 004e 0022     		movs	r2, #0
 209 0050 0021     		movs	r1, #0
 210 0052 4042     		rsbs	r0, r0, #0
 211 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 212              	.LVL7:
 181:Src/main.c    **** 
 213              		.loc 1 181 1 is_stmt 0 view .LVU52
 214 0058 13B0     		add	sp, sp, #76
 215              		@ sp needed
 216 005a 00BD     		pop	{pc}
 217              	.L11:
 155:Src/main.c    ****   }
 218              		.loc 1 155 5 is_stmt 1 view .LVU53
 219 005c 0348     		ldr	r0, .L13
 220 005e 9B21     		movs	r1, #155
 221 0060 FFF7FEFF 		bl	_Error_Handler
 222              	.LVL8:
 223              	.L12:
 168:Src/main.c    ****   }
 224              		.loc 1 168 5 view .LVU54
 225 0064 0148     		ldr	r0, .L13
 226 0066 A821     		movs	r1, #168
 227 0068 FFF7FEFF 		bl	_Error_Handler
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 9


 228              	.LVL9:
 229              	.L14:
 230              		.align	2
 231              	.L13:
 232 006c 00000000 		.word	.LC0
 233              		.cfi_endproc
 234              	.LFE42:
 236              		.section	.text.main,"ax",%progbits
 237              		.align	1
 238              		.global	main
 239              		.syntax unified
 240              		.code	16
 241              		.thumb_func
 243              	main:
 244              	.LFB40:
  73:Src/main.c    ****   SystemClock_Config();
 245              		.loc 1 73 1 view -0
 246              		.cfi_startproc
 247              		@ Volatile: function does not return.
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250 0000 70B5     		push	{r4, r5, r6, lr}
 251              	.LCFI3:
 252              		.cfi_def_cfa_offset 16
 253              		.cfi_offset 4, -16
 254              		.cfi_offset 5, -12
 255              		.cfi_offset 6, -8
 256              		.cfi_offset 14, -4
  74:Src/main.c    **** 
 257              		.loc 1 74 3 view .LVU56
 258 0002 FFF7FEFF 		bl	SystemClock_Config
 259              	.LVL10:
  76:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // For LEDS
 260              		.loc 1 76 3 view .LVU57
  76:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // For LEDS
 261              		.loc 1 76 6 is_stmt 0 view .LVU58
 262 0006 434B     		ldr	r3, .L17
 263 0008 5969     		ldr	r1, [r3, #20]
  76:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // For LEDS
 264              		.loc 1 76 15 view .LVU59
 265 000a 8022     		movs	r2, #128
 266 000c 9202     		lsls	r2, r2, #10
 267 000e 0A43     		orrs	r2, r1
 268 0010 5A61     		str	r2, [r3, #20]
  77:Src/main.c    ****   RCC->APB2RSTR |= RCC_APB2RSTR_SYSCFGRST; // For SYSCFG
 269              		.loc 1 77 3 is_stmt 1 view .LVU60
  77:Src/main.c    ****   RCC->APB2RSTR |= RCC_APB2RSTR_SYSCFGRST; // For SYSCFG
 270              		.loc 1 77 6 is_stmt 0 view .LVU61
 271 0012 5969     		ldr	r1, [r3, #20]
  77:Src/main.c    ****   RCC->APB2RSTR |= RCC_APB2RSTR_SYSCFGRST; // For SYSCFG
 272              		.loc 1 77 15 view .LVU62
 273 0014 8022     		movs	r2, #128
 274 0016 1203     		lsls	r2, r2, #12
 275 0018 0A43     		orrs	r2, r1
 276 001a 5A61     		str	r2, [r3, #20]
  78:Src/main.c    **** 
 277              		.loc 1 78 3 is_stmt 1 view .LVU63
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 10


  78:Src/main.c    **** 
 278              		.loc 1 78 6 is_stmt 0 view .LVU64
 279 001c DA68     		ldr	r2, [r3, #12]
  78:Src/main.c    **** 
 280              		.loc 1 78 17 view .LVU65
 281 001e 0121     		movs	r1, #1
 282 0020 0A43     		orrs	r2, r1
 283 0022 DA60     		str	r2, [r3, #12]
  81:Src/main.c    **** 	GPIOC -> MODER |= (1 << 14); // PIN 7 (BLLUE)
 284              		.loc 1 81 3 is_stmt 1 view .LVU66
  81:Src/main.c    **** 	GPIOC -> MODER |= (1 << 14); // PIN 7 (BLLUE)
 285              		.loc 1 81 9 is_stmt 0 view .LVU67
 286 0024 3C4B     		ldr	r3, .L17+4
 287 0026 1868     		ldr	r0, [r3]
  81:Src/main.c    **** 	GPIOC -> MODER |= (1 << 14); // PIN 7 (BLLUE)
 288              		.loc 1 81 18 view .LVU68
 289 0028 8022     		movs	r2, #128
 290 002a 5201     		lsls	r2, r2, #5
 291 002c 0243     		orrs	r2, r0
 292 002e 1A60     		str	r2, [r3]
  82:Src/main.c    **** 	GPIOC -> MODER |= (1 << 16); // PIN 8 (ORANGE)
 293              		.loc 1 82 2 is_stmt 1 view .LVU69
  82:Src/main.c    **** 	GPIOC -> MODER |= (1 << 16); // PIN 8 (ORANGE)
 294              		.loc 1 82 8 is_stmt 0 view .LVU70
 295 0030 1A68     		ldr	r2, [r3]
  82:Src/main.c    **** 	GPIOC -> MODER |= (1 << 16); // PIN 8 (ORANGE)
 296              		.loc 1 82 17 view .LVU71
 297 0032 8020     		movs	r0, #128
 298 0034 C001     		lsls	r0, r0, #7
 299 0036 0243     		orrs	r2, r0
 300 0038 1A60     		str	r2, [r3]
  83:Src/main.c    **** 	GPIOC -> MODER |= (1 << 18); // PIN 9 (GREEN)
 301              		.loc 1 83 2 is_stmt 1 view .LVU72
  83:Src/main.c    **** 	GPIOC -> MODER |= (1 << 18); // PIN 9 (GREEN)
 302              		.loc 1 83 8 is_stmt 0 view .LVU73
 303 003a 1C68     		ldr	r4, [r3]
  83:Src/main.c    **** 	GPIOC -> MODER |= (1 << 18); // PIN 9 (GREEN)
 304              		.loc 1 83 17 view .LVU74
 305 003c 8022     		movs	r2, #128
 306 003e 5202     		lsls	r2, r2, #9
 307 0040 2243     		orrs	r2, r4
 308 0042 1A60     		str	r2, [r3]
  84:Src/main.c    **** 
 309              		.loc 1 84 2 is_stmt 1 view .LVU75
  84:Src/main.c    **** 
 310              		.loc 1 84 8 is_stmt 0 view .LVU76
 311 0044 1C68     		ldr	r4, [r3]
  84:Src/main.c    **** 
 312              		.loc 1 84 17 view .LVU77
 313 0046 8022     		movs	r2, #128
 314 0048 D202     		lsls	r2, r2, #11
 315 004a 2243     		orrs	r2, r4
 316 004c 1A60     		str	r2, [r3]
  86:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 7);
 317              		.loc 1 86 3 is_stmt 1 view .LVU78
  86:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 7);
 318              		.loc 1 86 9 is_stmt 0 view .LVU79
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 11


 319 004e 5A68     		ldr	r2, [r3, #4]
  86:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 7);
 320              		.loc 1 86 19 view .LVU80
 321 0050 4024     		movs	r4, #64
 322 0052 A243     		bics	r2, r4
 323 0054 5A60     		str	r2, [r3, #4]
  87:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 8);
 324              		.loc 1 87 2 is_stmt 1 view .LVU81
  87:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 8);
 325              		.loc 1 87 8 is_stmt 0 view .LVU82
 326 0056 5A68     		ldr	r2, [r3, #4]
  87:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 8);
 327              		.loc 1 87 18 view .LVU83
 328 0058 4034     		adds	r4, r4, #64
 329 005a A243     		bics	r2, r4
 330 005c 5A60     		str	r2, [r3, #4]
  88:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 9);
 331              		.loc 1 88 2 is_stmt 1 view .LVU84
  88:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 9);
 332              		.loc 1 88 8 is_stmt 0 view .LVU85
 333 005e 5A68     		ldr	r2, [r3, #4]
  88:Src/main.c    **** 	GPIOC -> OTYPER &= ~(1 << 9);
 334              		.loc 1 88 18 view .LVU86
 335 0060 2E4C     		ldr	r4, .L17+8
 336 0062 2240     		ands	r2, r4
 337 0064 5A60     		str	r2, [r3, #4]
  89:Src/main.c    **** 
 338              		.loc 1 89 2 is_stmt 1 view .LVU87
  89:Src/main.c    **** 
 339              		.loc 1 89 8 is_stmt 0 view .LVU88
 340 0066 5A68     		ldr	r2, [r3, #4]
  89:Src/main.c    **** 
 341              		.loc 1 89 18 view .LVU89
 342 0068 2D4C     		ldr	r4, .L17+12
 343 006a 2240     		ands	r2, r4
 344 006c 5A60     		str	r2, [r3, #4]
  91:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 14);
 345              		.loc 1 91 2 is_stmt 1 view .LVU90
  91:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 14);
 346              		.loc 1 91 8 is_stmt 0 view .LVU91
 347 006e 9A68     		ldr	r2, [r3, #8]
  91:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 14);
 348              		.loc 1 91 19 view .LVU92
 349 0070 2C4C     		ldr	r4, .L17+16
 350 0072 2240     		ands	r2, r4
 351 0074 9A60     		str	r2, [r3, #8]
  92:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 16);
 352              		.loc 1 92 2 is_stmt 1 view .LVU93
  92:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 16);
 353              		.loc 1 92 8 is_stmt 0 view .LVU94
 354 0076 9A68     		ldr	r2, [r3, #8]
  92:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 16);
 355              		.loc 1 92 19 view .LVU95
 356 0078 2B4C     		ldr	r4, .L17+20
 357 007a 2240     		ands	r2, r4
 358 007c 9A60     		str	r2, [r3, #8]
  93:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 18);
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 12


 359              		.loc 1 93 2 is_stmt 1 view .LVU96
  93:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 18);
 360              		.loc 1 93 8 is_stmt 0 view .LVU97
 361 007e 9A68     		ldr	r2, [r3, #8]
  93:Src/main.c    **** 	GPIOC -> OSPEEDR &= ~(1 << 18);
 362              		.loc 1 93 19 view .LVU98
 363 0080 2A4C     		ldr	r4, .L17+24
 364 0082 2240     		ands	r2, r4
 365 0084 9A60     		str	r2, [r3, #8]
  94:Src/main.c    **** 
 366              		.loc 1 94 2 is_stmt 1 view .LVU99
  94:Src/main.c    **** 
 367              		.loc 1 94 8 is_stmt 0 view .LVU100
 368 0086 9A68     		ldr	r2, [r3, #8]
  94:Src/main.c    **** 
 369              		.loc 1 94 19 view .LVU101
 370 0088 294C     		ldr	r4, .L17+28
 371 008a 2240     		ands	r2, r4
 372 008c 9A60     		str	r2, [r3, #8]
  96:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 14)|(1 << 15));
 373              		.loc 1 96 2 is_stmt 1 view .LVU102
  96:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 14)|(1 << 15));
 374              		.loc 1 96 8 is_stmt 0 view .LVU103
 375 008e DA68     		ldr	r2, [r3, #12]
  96:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 14)|(1 << 15));
 376              		.loc 1 96 17 view .LVU104
 377 0090 284C     		ldr	r4, .L17+32
 378 0092 2240     		ands	r2, r4
 379 0094 DA60     		str	r2, [r3, #12]
  97:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 16)|(1 << 17));
 380              		.loc 1 97 2 is_stmt 1 view .LVU105
  97:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 16)|(1 << 17));
 381              		.loc 1 97 8 is_stmt 0 view .LVU106
 382 0096 DA68     		ldr	r2, [r3, #12]
  97:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 16)|(1 << 17));
 383              		.loc 1 97 17 view .LVU107
 384 0098 274C     		ldr	r4, .L17+36
 385 009a 2240     		ands	r2, r4
 386 009c DA60     		str	r2, [r3, #12]
  98:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 18)|(1 << 19));
 387              		.loc 1 98 2 is_stmt 1 view .LVU108
  98:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 18)|(1 << 19));
 388              		.loc 1 98 8 is_stmt 0 view .LVU109
 389 009e DA68     		ldr	r2, [r3, #12]
  98:Src/main.c    **** 	GPIOC -> PUPDR &= ~((1 << 18)|(1 << 19));
 390              		.loc 1 98 17 view .LVU110
 391 00a0 264C     		ldr	r4, .L17+40
 392 00a2 2240     		ands	r2, r4
 393 00a4 DA60     		str	r2, [r3, #12]
  99:Src/main.c    **** 
 394              		.loc 1 99 2 is_stmt 1 view .LVU111
  99:Src/main.c    **** 
 395              		.loc 1 99 8 is_stmt 0 view .LVU112
 396 00a6 DA68     		ldr	r2, [r3, #12]
  99:Src/main.c    **** 
 397              		.loc 1 99 17 view .LVU113
 398 00a8 254C     		ldr	r4, .L17+44
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 13


 399 00aa 2240     		ands	r2, r4
 400 00ac DA60     		str	r2, [r3, #12]
 102:Src/main.c    **** 	GPIOA -> OSPEEDR &= ~(1 << 0);
 401              		.loc 1 102 3 is_stmt 1 view .LVU114
 102:Src/main.c    **** 	GPIOA -> OSPEEDR &= ~(1 << 0);
 402              		.loc 1 102 9 is_stmt 0 view .LVU115
 403 00ae 9022     		movs	r2, #144
 404 00b0 D205     		lsls	r2, r2, #23
 405 00b2 1468     		ldr	r4, [r2]
 102:Src/main.c    **** 	GPIOA -> OSPEEDR &= ~(1 << 0);
 406              		.loc 1 102 18 view .LVU116
 407 00b4 0325     		movs	r5, #3
 408 00b6 AC43     		bics	r4, r5
 409 00b8 1460     		str	r4, [r2]
 103:Src/main.c    **** 	GPIOA -> PUPDR &= ~(1 << 0);
 410              		.loc 1 103 2 is_stmt 1 view .LVU117
 103:Src/main.c    **** 	GPIOA -> PUPDR &= ~(1 << 0);
 411              		.loc 1 103 8 is_stmt 0 view .LVU118
 412 00ba 9468     		ldr	r4, [r2, #8]
 103:Src/main.c    **** 	GPIOA -> PUPDR &= ~(1 << 0);
 413              		.loc 1 103 19 view .LVU119
 414 00bc 8C43     		bics	r4, r1
 415 00be 9460     		str	r4, [r2, #8]
 104:Src/main.c    **** 	GPIOA -> PUPDR |= (1 << 1);
 416              		.loc 1 104 2 is_stmt 1 view .LVU120
 104:Src/main.c    **** 	GPIOA -> PUPDR |= (1 << 1);
 417              		.loc 1 104 8 is_stmt 0 view .LVU121
 418 00c0 D468     		ldr	r4, [r2, #12]
 104:Src/main.c    **** 	GPIOA -> PUPDR |= (1 << 1);
 419              		.loc 1 104 17 view .LVU122
 420 00c2 8C43     		bics	r4, r1
 421 00c4 D460     		str	r4, [r2, #12]
 105:Src/main.c    **** 
 422              		.loc 1 105 2 is_stmt 1 view .LVU123
 105:Src/main.c    **** 
 423              		.loc 1 105 8 is_stmt 0 view .LVU124
 424 00c6 D468     		ldr	r4, [r2, #12]
 105:Src/main.c    **** 
 425              		.loc 1 105 17 view .LVU125
 426 00c8 013D     		subs	r5, r5, #1
 427 00ca 2C43     		orrs	r4, r5
 428 00cc D460     		str	r4, [r2, #12]
 108:Src/main.c    ****   EXTI -> RTSR |= (1 << 0); // Rising edge trigger
 429              		.loc 1 108 3 is_stmt 1 view .LVU126
 108:Src/main.c    ****   EXTI -> RTSR |= (1 << 0); // Rising edge trigger
 430              		.loc 1 108 8 is_stmt 0 view .LVU127
 431 00ce 1D4A     		ldr	r2, .L17+48
 432 00d0 1468     		ldr	r4, [r2]
 108:Src/main.c    ****   EXTI -> RTSR |= (1 << 0); // Rising edge trigger
 433              		.loc 1 108 15 view .LVU128
 434 00d2 0C43     		orrs	r4, r1
 435 00d4 1460     		str	r4, [r2]
 109:Src/main.c    **** 
 436              		.loc 1 109 3 is_stmt 1 view .LVU129
 109:Src/main.c    **** 
 437              		.loc 1 109 8 is_stmt 0 view .LVU130
 438 00d6 9468     		ldr	r4, [r2, #8]
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 14


 109:Src/main.c    **** 
 439              		.loc 1 109 16 view .LVU131
 440 00d8 2143     		orrs	r1, r4
 441 00da 9160     		str	r1, [r2, #8]
 112:Src/main.c    ****   NVIC_EnableIRQ(EXTI0_1_IRQn);
 442              		.loc 1 112 3 is_stmt 1 view .LVU132
 112:Src/main.c    ****   NVIC_EnableIRQ(EXTI0_1_IRQn);
 443              		.loc 1 112 17 is_stmt 0 view .LVU133
 444 00dc 1A49     		ldr	r1, .L17+52
 445 00de 8A68     		ldr	r2, [r1, #8]
 112:Src/main.c    ****   NVIC_EnableIRQ(EXTI0_1_IRQn);
 446              		.loc 1 112 21 view .LVU134
 447 00e0 0724     		movs	r4, #7
 448 00e2 A243     		bics	r2, r4
 449 00e4 8A60     		str	r2, [r1, #8]
 113:Src/main.c    ****   NVIC_SetPriority(EXTI0_1_IRQn, 1); // Set the EXTI priority to 1 (high-priority)
 450              		.loc 1 113 3 is_stmt 1 view .LVU135
 451              	.LVL11:
 452              	.LBB6:
 453              	.LBI6:
 454              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 15


  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 16


  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 17


 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 18


 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 19


 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 20


 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 21


 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 22


 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 23


 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 24


 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 25


 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 455              		.loc 2 623 22 view .LVU136
 456              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 457              		.loc 2 625 3 view .LVU137
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 458              		.loc 2 627 5 view .LVU138
 459              		.loc 2 627 20 is_stmt 0 view .LVU139
 460 00e6 194A     		ldr	r2, .L17+56
 461 00e8 2021     		movs	r1, #32
 462 00ea 1160     		str	r1, [r2]
 463              	.LVL12:
 464              		.loc 2 627 20 view .LVU140
 465              	.LBE7:
 466              	.LBE6:
 114:Src/main.c    **** 
 467              		.loc 1 114 3 is_stmt 1 view .LVU141
 468              	.LBB8:
 469              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 26


 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 27


 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 470              		.loc 2 730 22 view .LVU142
 471              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 472              		.loc 2 732 3 view .LVU143
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 473              		.loc 2 734 5 view .LVU144
 474              		.loc 2 734 52 is_stmt 0 view .LVU145
 475 00ec C124     		movs	r4, #193
 476 00ee A400     		lsls	r4, r4, #2
 477 00f0 1159     		ldr	r1, [r2, r4]
 478              		.loc 2 734 33 view .LVU146
 479 00f2 174D     		ldr	r5, .L17+60
 480 00f4 2940     		ands	r1, r5
 481              		.loc 2 734 102 view .LVU147
 482 00f6 0843     		orrs	r0, r1
 483              		.loc 2 734 30 view .LVU148
 484 00f8 1051     		str	r0, [r2, r4]
 485              	.LVL13:
 486              		.loc 2 734 30 view .LVU149
 487              	.LBE9:
 488              	.LBE8:
 118:Src/main.c    **** 
 489              		.loc 1 118 3 is_stmt 1 view .LVU150
 118:Src/main.c    **** 
 490              		.loc 1 118 16 is_stmt 0 view .LVU151
 491 00fa 8022     		movs	r2, #128
 492 00fc 9200     		lsls	r2, r2, #2
 493 00fe 5A61     		str	r2, [r3, #20]
 494              	.L16:
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 28


 120:Src/main.c    ****     HAL_Delay(500); // Delay 500ms
 495              		.loc 1 120 3 is_stmt 1 view .LVU152
 121:Src/main.c    ****     GPIOC -> ODR ^= GPIO_ODR_6;    
 496              		.loc 1 121 5 view .LVU153
 497 0100 FA20     		movs	r0, #250
 498 0102 4000     		lsls	r0, r0, #1
 499 0104 FFF7FEFF 		bl	HAL_Delay
 500              	.LVL14:
 122:Src/main.c    **** 
 501              		.loc 1 122 5 discriminator 1 view .LVU154
 122:Src/main.c    **** 
 502              		.loc 1 122 11 is_stmt 0 discriminator 1 view .LVU155
 503 0108 034A     		ldr	r2, .L17+4
 504 010a 5369     		ldr	r3, [r2, #20]
 122:Src/main.c    **** 
 505              		.loc 1 122 18 discriminator 1 view .LVU156
 506 010c 4021     		movs	r1, #64
 507 010e 4B40     		eors	r3, r1
 508 0110 5361     		str	r3, [r2, #20]
 120:Src/main.c    ****     HAL_Delay(500); // Delay 500ms
 509              		.loc 1 120 9 is_stmt 1 view .LVU157
 510 0112 F5E7     		b	.L16
 511              	.L18:
 512              		.align	2
 513              	.L17:
 514 0114 00100240 		.word	1073876992
 515 0118 00080048 		.word	1207961600
 516 011c FFFEFFFF 		.word	-257
 517 0120 FFFDFFFF 		.word	-513
 518 0124 FFEFFFFF 		.word	-4097
 519 0128 FFBFFFFF 		.word	-16385
 520 012c FFFFFEFF 		.word	-65537
 521 0130 FFFFFBFF 		.word	-262145
 522 0134 FFCFFFFF 		.word	-12289
 523 0138 FF3FFFFF 		.word	-49153
 524 013c FFFFFCFF 		.word	-196609
 525 0140 FFFFF3FF 		.word	-786433
 526 0144 00040140 		.word	1073808384
 527 0148 00000140 		.word	1073807360
 528 014c 00E100E0 		.word	-536813312
 529 0150 FF00FFFF 		.word	-65281
 530              		.cfi_endproc
 531              	.LFE40:
 533              		.text
 534              	.Letext0:
 535              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 536              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 537              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 538              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 539              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 540              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 541              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:19     .text.EXTI0_1_IRQHandler:00000000 $t
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:25     .text.EXTI0_1_IRQHandler:00000000 EXTI0_1_IRQHandler
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:87     .text.EXTI0_1_IRQHandler:0000003c $d
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:94     .text._Error_Handler:00000000 $t
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:100    .text._Error_Handler:00000000 _Error_Handler
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:118    .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:123    .text.SystemClock_Config:00000000 $t
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:129    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:232    .text.SystemClock_Config:0000006c $d
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:237    .text.main:00000000 $t
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:243    .text.main:00000000 main
/var/folders/kb/jp48nf6n0vs1vb3q737nlq0w0000gn/T//ccY0AeuU.s:514    .text.main:00000114 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Delay
